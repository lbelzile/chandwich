% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/confidence_intervals.R
\name{conf_intervals}
\alias{conf_intervals}
\title{Confidence intervals}
\usage{
conf_intervals(object, which_pars = NULL, init = NULL, conf = 95,
  mult = 1.5, num = 10, type = c("vertical", "cholesky", "dilation",
  "none"), ...)
}
\arguments{
\item{object}{An object of class \code{"chandwich"} returned by
\code{adjust_loglik}.}

\item{which_pars}{A vector specifying the (unfixed) parameters for which
  confidence intervals are required.  Can be either a numeric vector,
  specifying indices of the components of the \strong{full} parameter
  vector, or a character vector of parameter names, which must be a subset
  of those supplied in \code{par_names} in the call to
  \code{\link{adjust_loglik}} that produced \code{object}.

  \code{which_pars} must not have any parameters in common with
  \code{attr(object, "fixed_pars")}.  \code{which_pars} must not contain
  all of the unfixed parameters, i.e. there is no point in profiling over
  all the unfixed parameters.}

\item{init}{A numeric vector of initial estimates of the values of the
parameters that are not fixed and are not in \code{which_pars}.
Should have length \code{attr(object, "p_current") - length(which_pars)}.
If \code{init} is \code{NULL} or is of the wrong length then the
relevant components from the MLE stored in \code{object} are used.}

\item{conf}{A numeric scalar. Confidence level for the intervals.}

\item{mult}{A numeric vector of length 1 or the same length as
\code{which_pars}.
The search for the profile loglikelihood-based confidence limits is
conducted over the corresponding symmetric confidence intervals, extended
by a factor of the corresponding component of \code{mult}.}

\item{num}{A numeric scalar.  The number of values at which to evaluate the
profile loglikelihood either side of the MLE.}

\item{type}{A character scalar.  The argument \code{type} to the function
returned by \code{\link{adjust_loglik}}, that is, the type of adjustment
made to the independence loglikelihood function.}

\item{...}{Further arguments to be passed to \code{\link[stats]{optim}}.
These may include \code{gr}, \code{method}, \code{lower}, \code{upper}
or \code{control}.}
}
\value{
A list with components
  \itemize{
    \item{\strong{cutoff}: }{A numeric scalar.  For values inside the
      confidence interval the profile loglikelihood lies above
      \code{cutoff}.}
    \item{\strong{parameter_vals}, \strong{prof_loglik_vals}: }
      {\code{2 * num + 1} by \code{length{which_pars}} numeric matrices.
      Column i of \code{parameter_vals} contains the profiled values of
      parameter \code{which_par[i]}.  Column i of \code{prof_loglik_vals}}
      contains the corresponding values of the profile loglikelihood.
    \item{\strong{sym_CI}, \strong{prof_CI}: }{\code{length(which_pars)}
      by 2 numeric matrices.  Row i of \code{sym_CI} (\code{prof_CI})
      contains the symmetric (profile loglikelihood-based) confidence
      intervals for parameter \code{which_pars[i]}.}
  }
}
\description{
Calculates confidence intervals for individual parameters
}
\examples{
# GEV model, owtemps data ----------
# ... following Section 5.2 of Chandler and Bate (2007)

gev_loglik <- function(pars, data) {
  o_pars <- pars[c(1, 3, 5)] + pars[c(2, 4, 6)]
  w_pars <- pars[c(1, 3, 5)] - pars[c(2, 4, 6)]
  if (o_pars[2] <= 0 | w_pars[2] <= 0) return(-Inf)
  o_data <- data[, "Oxford"]
  w_data <- data[, "Worthing"]
  check <- 1 + o_pars[3] * (o_data - o_pars[1]) / o_pars[2]
  if (any(check <= 0)) return(-Inf)
  check <- 1 + w_pars[3] * (w_data - w_pars[1]) / w_pars[2]
  if (any(check <= 0)) return(-Inf)
  o_loglik <- log_gev(o_data, o_pars[1], o_pars[2], o_pars[3])
  w_loglik <- log_gev(w_data, w_pars[1], w_pars[2], w_pars[3])
  return(o_loglik + w_loglik)
}

# Initial estimates (method of moments for the Gumbel case)
sigma <- as.numeric(sqrt(6 * diag(stats::var(owtemps))) / pi)
mu <- as.numeric(colMeans(owtemps) - 0.57722 * sigma)
init <- c(mean(mu), -diff(mu) / 2, mean(sigma), -diff(sigma) / 2, 0, 0)

# Perform the log-likelihood adjustment of the full model ------

large <- adjust_loglik(gev_loglik, data = owtemps, init = init,
        par_names = c("mu0", "mu1", "sigma0", "sigma1", "xi0", "xi1"))

conf_intervals(large, which_pars = c("xi0", "xi1"))
}
